import matplotlib.pyplot as plt
import numpy as np

# Time complexity functions
def hash_table_insert_get(n):
    return np.ones_like(n)

def balanced_bst_insert_max_heap(n):
    return np.log(n)

def hash_table_range_search_worst_case_bst_insert(n):
    return n

# Generate input sizes
n = np.linspace(1, 50, 50)

# Calculate time complexities
y_hash_table_insert_get = hash_table_insert_get(n)
y_balanced_bst_insert_max_heap = balanced_bst_insert_max_heap(n)
y_hash_table_range_search_worst_case_bst_insert = hash_table_range_search_worst_case_bst_insert(n)

# Plot the graph
plt.plot(n, y_hash_table_insert_get, label='Hash Table Insert/Get (O(1))')
plt.plot(n, y_balanced_bst_insert_max_heap, label='Balanced BST Insert/Max Heap (O(log n))')
plt.plot(n, y_hash_table_range_search_worst_case_bst_insert, label='Hash Table Range Search/Worst-case BST Insert (O(n))')
plt.xlabel('Input Size (n)')
plt.ylabel('Time Complexity')
plt.title('Time Complexity Analysis of Algorithms')
plt.legend()
plt.grid(True)
plt.show()
